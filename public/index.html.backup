<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SparQ Digital Dashboard</title>
    <script src="base-path.js"></script>
    <script src="password-peek.js"></script>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
            background: linear-gradient(135deg, #da0c43 0%, #e41854 50%, #1a7ad9 100%);
            min-height: 100vh;
            padding: 20px;
        }
        .container { 
            max-width: 1400px; 
            margin: 0 auto; 
            background: white; 
            border-radius: 15px; 
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        .header { 
            background: linear-gradient(135deg, #da0c43 0%, #0658a5 100%); 
            color: white; 
            padding: 30px; 
            text-align: center; 
        }
        .header h1 { font-size: 2.5em; margin-bottom: 10px; }
        .header p { font-size: 1.2em; opacity: 0.9; }
        .main-content { display: flex; }
        .sidebar { 
            width: 300px; 
            background: #f8f9fa; 
            padding: 30px; 
            border-right: 1px solid #dee2e6;
        }
        .content { flex: 1; padding: 30px; }
        .nav-item { 
            display: block; 
            padding: 15px 20px; 
            margin: 10px 0; 
            background: white; 
            border: none; 
            border-radius: 8px; 
            cursor: pointer; 
            width: 100%;
            text-align: left;
            font-size: 1.1em;
            transition: all 0.3s;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .nav-item:hover, .nav-item.active { 
            background: #2c5aa0; 
            color: white; 
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        .section { display: none; }
        .section.active { display: block; }
        .card { 
            background: white; 
            border-radius: 10px; 
            padding: 25px; 
            margin: 20px 0; 
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
            border-left: 4px solid #2c5aa0;
        }
        .form-group { margin: 20px 0; }
        .form-group label { 
            display: block; 
            margin-bottom: 8px; 
            font-weight: 600; 
            color: #333;
        }
        .form-group input, .form-group select, .form-group textarea { 
            width: 100%; 
            padding: 12px 15px; 
            border: 2px solid #e9ecef; 
            border-radius: 8px; 
            font-size: 1em;
            transition: border-color 0.3s;
        }
        .form-group input:focus, .form-group select:focus, .form-group textarea:focus { 
            outline: none; 
            border-color: #2c5aa0; 
        }
        .btn { 
            background: linear-gradient(135deg, #da0c43 0%, #0658a5 100%); 
            color: white; 
            border: none; 
            padding: 15px 30px; 
            border-radius: 8px; 
            cursor: pointer; 
            font-size: 1.1em;
            font-weight: 600;
            transition: all 0.3s;
            margin: 10px 5px;
        }
        .btn:hover { 
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        .btn-primary { background: linear-gradient(135deg, #da0c43 0%, #0658a5 100%); }
        .btn-secondary { background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%); }
        .btn-success { background: linear-gradient(135deg, #28a745 0%, #20c997 100%); }
        .btn-danger { background: linear-gradient(135deg, #dc3545 0%, #c82333 100%); }
        .btn-info { background: linear-gradient(135deg, #17a2b8 0%, #138496 100%); }
        .status-indicator { 
            display: inline-block; 
            width: 12px; 
            height: 12px; 
            border-radius: 50%; 
            margin-right: 8px;
        }
        .status-online { background: #28a745; }
        .status-offline { background: #dc3545; }
        .stats-grid { 
            display: grid; 
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); 
            gap: 20px; 
            margin: 20px 0;
        }
        .stat-card { 
            background: linear-gradient(135deg, #da0c43 0%, #e41854 50%, #1a7ad9 100%); 
            color: white; 
            padding: 25px; 
            border-radius: 10px; 
            text-align: center;
        }
        .stat-number { font-size: 3em; font-weight: bold; margin-bottom: 10px; }
        .stat-label { font-size: 1.2em; opacity: 0.9; }
        .email-list { margin: 20px 0; }
        .email-item { 
            display: flex; 
            justify-content: space-between; 
            align-items: center; 
            padding: 15px; 
            margin: 10px 0; 
            background: #f8f9fa; 
            border-radius: 8px; 
            border-left: 4px solid #2c5aa0;
        }
        .email-info { flex: 1; }
        .email-actions { display: flex; gap: 10px; }
        .log-entry { 
            padding: 10px; 
            margin: 5px 0; 
            background: #f8f9fa; 
            border-left: 3px solid #28a745; 
            border-radius: 4px;
            font-family: monospace;
        }
        .progress-bar { 
            width: 100%; 
            height: 20px; 
            background: #e9ecef; 
            border-radius: 10px; 
            overflow: hidden; 
            margin: 10px 0;
        }
        .progress-fill { 
            height: 100%; 
            background: linear-gradient(90deg, #28a745, #20c997); 
            transition: width 0.3s;
        }
        .alert { 
            padding: 15px; 
            margin: 15px 0; 
            border-radius: 8px; 
            border-left: 4px solid;
        }
        .alert-success { background: #d4edda; border-color: #28a745; color: #155724; }
        .alert-error { background: #f8d7da; border-color: #dc3545; color: #721c24; }
        .alert-info { background: #d1ecf1; border-color: #17a2b8; color: #0c5460; }
    </style>
    <link rel="stylesheet" href="sparq-colors.css">
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üçé SparQ Digital Dashboard</h1>
            <p>Professional Email Management & Automation Platform</p>
        </div>
        
        <div class="main-content">
            <div class="sidebar">
                <button class="nav-item active" data-section="dashboard">üìä Dashboard</button>
                <button class="nav-item" data-section="create-domain">üåê Create Domain Email</button>
                <button class="nav-item" data-section="manage-emails">üìß Manage Emails</button>
                <button class="nav-item" data-section="storage">üíæ Storage Management</button>
                <button class="nav-item" data-section="dns-manager">üåç DNS Manager</button>
                <button class="nav-item" data-section="client-portal">üë• Client Portal</button>
                <button class="nav-item" data-section="system-logs">üìã System Logs</button>
                <button class="nav-item" data-section="settings">‚öôÔ∏è Settings</button>
            </div>
            
            <div class="content">
                <!-- Dashboard Section -->
                <div id="dashboard" class="section active">
                    <h2>üìä System Overview</h2>
                    
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-number" id="total-domains">0</div>
                            <div class="stat-label">Active Domains</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="total-emails">0</div>
                            <div class="stat-label">Email Accounts</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="storage-used">0GB</div>
                            <div class="stat-label">Storage Used</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-number" id="monthly-savings">$0</div>
                            <div class="stat-label">Monthly Savings</div>
                        </div>
                    </div>
                    
                    <div class="card">
                        <h3>üîß System Status</h3>
                        <p><span class="status-indicator status-online"></span>Postfix SMTP Server</p>
                        <p><span class="status-indicator status-online"></span>Dovecot IMAP Server</p>
                        <p><span class="status-indicator status-online"></span>Nginx Web Server</p>
                        <p><span class="status-indicator status-online"></span>DNS Resolution</p>
                    </div>
                </div>
                
                <!-- Create Domain Email Section -->
                <div id="create-domain" class="section">
                    <h2>üåê Create Domain Email Setup</h2>
                    
                    <div class="card">
                        <h3>üöÄ Automated Email Setup</h3>
                        <form id="create-domain-form">
                            <div class="form-group">
                                <label>Domain Name</label>
                                <input type="text" id="domain-name" placeholder="Enter domain (e.g., company.com)" required>
                            </div>
                            
                            <div class="form-group">
                                <label>Client Name</label>
                                <input type="text" id="client-name" placeholder="Enter client or company name" required>
                            </div>
                            
                            <div class="form-group">
                                <label>Client Email (for credentials)</label>
                                <input type="email" id="client-contact" placeholder="Enter primary contact email" required>
                            </div>
                            
                            <div class="form-group">
                                <label>Email Accounts to Create</label>
                                <textarea id="email-accounts" placeholder="info@company.com&#10;support@company.com&#10;admin@company.com&#10;sales@company.com" rows="5"></textarea>
                                <small>One email per line. System will auto-generate secure passwords.</small>
                            </div>
                            
                            <div class="form-group">
                                <label>Storage Allocation</label>
                                <select id="storage-allocation">
                                    <option value="25">25GB (Standard)</option>
                                    <option value="50">50GB (Premium)</option>
                                    <option value="100">100GB (Enterprise)</option>
                                </select>
                            </div>
                            
                            <div class="form-group">
                                <label>
                                    <input type="checkbox" id="auto-dns"> Automatically configure DNS records
                                </label>
                            </div>
                            
                            <div class="form-group">
                                <label>
                                    <input type="checkbox" id="email-client" checked> Email credentials to client
                                </label>
                            </div>
                            
                            <button type="submit" class="btn btn-success">üöÄ Create Email Setup</button>
                        </form>
                    </div>
                    
                    <div id="setup-progress" style="display: none;">
                        <div class="card">
                            <h3>‚ö° Setup Progress</h3>
                            <div id="progress-log"></div>
                            <div class="progress-bar">
                                <div class="progress-fill" id="progress-fill" style="width: 0%"></div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <!-- Manage Emails Section -->
                <div id="manage-emails" class="section">
                    <h2>üìß Email Account Management</h2>
                    
                    <div class="card">
                        <h3>üåê Webmail Access</h3>
                        <p>Access your email through the web interface:</p>
                        <button class="btn btn-primary action-btn" data-action="access-mela-webmail">üçé Access melawholefoodsva.com Webmail</button>
                        <button class="btn btn-secondary action-btn" data-action="open-webmail">üìß Access Other Domain Webmail</button>
                    </div>
                    
                    <div class="card">
                        <h3>üìã Active Email Accounts</h3>
                        <div id="email-list" class="email-list">
                            <!-- Email accounts will be loaded here -->
                        </div>
                        <button class="btn btn-info action-btn" data-action="refresh-email-list">üîÑ Refresh List</button>
                    </div>
                </div>
                
                <!-- Storage Management Section -->
                <div id="storage" class="section">
                    <h2>üíæ Storage Management</h2>
                    
                    <div class="card">
                        <h3>üìä Storage Overview</h3>
                        <p><strong>Total NVMe Storage:</strong> 1TB</p>
                        <p><strong>Available for Email:</strong> <span id="available-storage">975GB</span></p>
                        <p><strong>Currently Allocated:</strong> <span id="allocated-storage">25GB</span></p>
                        
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: 2.5%"></div>
                        </div>
                        
                        <h4>üìÅ Domain Storage Allocation</h4>
                        <div id="domain-storage-list">
                            <!-- Domain storage info will be loaded here -->
                        </div>
                    </div>
                </div>
                
                <!-- DNS Manager Section -->
                <div id="dns-manager" class="section">
                    <h2>üåç DNS Management</h2>
                    
                    <div class="card">
                        <h3>üîß DNS Record Templates</h3>
                        <p>Automatically create DNS records for new domains:</p>
                        <ul>
                            <li>‚úÖ MX Record: domain.com ‚Üí domain.com (Priority 10)</li>
                            <li>‚úÖ A Record: mail.domain.com ‚Üí 68.54.208.207</li>
                            <li>‚úÖ SPF Record: "v=spf1 mx a:domain.com ~all"</li>
                            <li>‚úÖ DMARC Record: Basic DMARC policy</li>
                        </ul>
                        
                        <button class="btn btn-info action-btn" data-action="test-dns">üß™ Test DNS Configuration</button>
                    </div>
                </div>
                
                <!-- Client Portal Section -->
                <div id="client-portal" class="section">
                    <h2>üë• Client Portal</h2>
                    
                    <div class="card">
                        <h3>üì® Client Communication</h3>
                        <p>Automated email templates for client setup notifications:</p>
                        
                        <div class="form-group">
                            <label>Email Template Preview</label>
                            <textarea readonly rows="10" style="background: #f8f9fa;">
Subject: üéâ Your Professional Email Hosting is Ready!

Dear [CLIENT_NAME],

Your FREE professional email hosting has been successfully configured!

üìß Email Accounts Created:
[EMAIL_ACCOUNTS_LIST]

üåê Webmail Access: http://mail.[DOMAIN]
üì± Email Settings: [DOMAIN] (IMAP:993, SMTP:587)
üíæ Storage Allocated: [STORAGE]GB
üí∞ Monthly Savings: No more email hosting fees!

Login credentials are attached.

Best regards,
SparQd Team
                            </textarea>
                        </div>
                    </div>

                    <!-- User Management Section -->
                    <div class="card">
                        <h3>üë• User Management</h3>
                        <p>Manage admin users, managers, and client information.</p>
                        
                        <div class="form-group">
                            <div style="display: flex; gap: 10px; margin-bottom: 20px;">
                                <button class="btn user-tab-btn" data-user-tab="admin-users">üë®‚Äçüíº Admin Users</button>
                                <button class="btn user-tab-btn" data-user-tab="managers">üìä Managers</button>
                                <button class="btn user-tab-btn" data-user-tab="clients">üë§ Clients</button>
                                <button class="btn user-tab-btn" data-user-tab="add-user">‚ûï Add User</button>
                            </div>
                        </div>

                        <!-- Admin Users Tab -->
                        <div id="admin-users-tab" class="user-tab" style="display: none;">
                            <h4>üë®‚Äçüíº Administrator Accounts</h4>
                            <div id="admin-users-list">
                                <!-- Admin users will be loaded here -->
                            </div>
                        </div>

                        <!-- Managers Tab -->
                        <div id="managers-tab" class="user-tab" style="display: none;">
                            <h4>üìä Manager Accounts</h4>
                            <div id="managers-list">
                                <!-- Manager accounts will be loaded here -->
                            </div>
                        </div>

                        <!-- Clients Tab -->
                        <div id="clients-tab" class="user-tab" style="display: none;">
                            <h4>üë§ Client Information</h4>
                            <div style="margin-bottom: 20px;">
                                <button class="btn user-action-btn" data-action="refresh-clients">üîÑ Refresh Clients</button>
                                <button class="btn user-action-btn" data-action="export-clients">üìä Export Data</button>
                            </div>
                            <div id="clients-list">
                                <!-- Client information will be loaded here -->
                            </div>
                        </div>

                        <!-- Add User Tab -->
                        <div id="add-user-tab" class="user-tab" style="display: none;">
                            <h4>‚ûï Add New User</h4>
                            <form id="add-user-form">
                                <div class="form-group">
                                    <label>User Type</label>
                                    <select id="new-user-type" required>
                                        <option value="">Select user type...</option>
                                        <option value="admin">Administrator</option>
                                        <option value="manager">Manager</option>
                                        <option value="client">Client</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label>Username</label>
                                    <input type="text" id="new-username" required>
                                </div>
                                <div class="form-group">
                                    <label>Email</label>
                                    <input type="email" id="new-email" required>
                                </div>
                                <div class="form-group">
                                    <label>Full Name</label>
                                    <input type="text" id="new-fullname" required>
                                </div>
                                <div class="form-group">
                                    <label>Initial Password</label>
                                    <input type="password" id="new-password" required>
                                </div>
                                <div class="form-group" id="client-fields" style="display: none;">
                                    <label>Company</label>
                                    <input type="text" id="new-company">
                                    <label>Phone</label>
                                    <input type="tel" id="new-phone">
                                    <label>Domain</label>
                                    <input type="text" id="new-domain" placeholder="example.com">
                                </div>
                                <button type="submit" class="btn">‚úÖ Create User</button>
                            </form>
                        </div>
                    </div>
                </div>
                
                <!-- System Logs Section -->
                <div id="system-logs" class="section">
                    <h2>üìã System Logs</h2>
                    
                    <div class="card">
                        <h3>üìù Recent Activity</h3>
                        <div id="system-log-entries">
                            <!-- Log entries will be loaded here -->
                        </div>
                        <button class="btn btn-info action-btn" data-action="refresh-logs">üîÑ Refresh Logs</button>
                    </div>
                </div>
                
                <!-- Settings Section -->
                <div id="settings" class="section">
                    <h2>‚öôÔ∏è System Settings</h2>
                    
                    <div class="card">
                        <h3>üîß Email Server Configuration</h3>
                        <div class="form-group">
                            <label>Server IP</label>
                            <input type="text" value="68.54.208.207" readonly>
                        </div>
                        <div class="form-group">
                            <label>Default Storage per Domain</label>
                            <select>
                                <option value="25" selected>25GB</option>
                                <option value="50">50GB</option>
                                <option value="100">100GB</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label>Auto-generate Password Length</label>
                            <input type="number" value="12" min="8" max="32">
                        </div>
                        <button class="btn btn-success">üíæ Save Settings</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <script src="admin-dashboard.js"></script>
    
    <!-- Navigation Event Listeners -->
    <script>
        // Wait for DOM to be ready and ensure scripts are loaded
        document.addEventListener('DOMContentLoaded', function() {
            console.log('DOM loaded, setting up navigation...');
            
            // Add a small delay to ensure admin-dashboard.js is fully loaded
            setTimeout(function() {
                setupNavigation();
            }, 100);
        });
        
        function setupNavigation() {
            console.log('Setting up navigation event listeners...');
            console.log('showSection available?', typeof window.showSection);
            console.log('showUserTab available?', typeof window.showUserTab);
            
            // Add click event listeners to all nav items
            document.querySelectorAll('.nav-item[data-section]').forEach(navItem => {
                navItem.addEventListener('click', function() {
                    const sectionId = this.getAttribute('data-section');
                    console.log('Navigation clicked:', sectionId);
                    
                    // Call showSection function
                    if (typeof window.showSection === 'function') {
                        window.showSection(sectionId);
                    } else if (typeof showSection === 'function') {
                        showSection(sectionId);
                    } else {
                        console.error('showSection function not found, using manual fallback');
                        // Fallback manual navigation
                        manualShowSection(sectionId);
                    }
                });
            });
            
                        
            // Add event listeners for user management tab buttons
            document.querySelectorAll('.user-tab-btn[data-user-tab]').forEach(tabBtn => {
                tabBtn.addEventListener('click', function() {
                    const tabName = this.getAttribute('data-user-tab');
                    console.log('User tab clicked:', tabName);
                    
                    if (typeof window.showUserTab === 'function') {
                        window.showUserTab(tabName);
                    } else if (typeof showUserTab === 'function') {
                        showUserTab(tabName);
                    } else {
                        console.error('showUserTab function not found');
                    }
                });
            });
            
            // Add event listeners for user action buttons
            document.querySelectorAll('.user-action-btn[data-action]').forEach(actionBtn => {
                actionBtn.addEventListener('click', function() {
                    const action = this.getAttribute('data-action');
                    console.log('User action clicked:', action);
                    
                    switch(action) {
                        case 'refresh-clients':
                            if (typeof window.loadClientsList === 'function') {
                                window.loadClientsList();
                            } else if (typeof loadClientsList === 'function') {
                                loadClientsList();
                            }
                            break;
                        case 'export-clients':
                            if (typeof window.exportClientsData === 'function') {
                                window.exportClientsData();
                            } else if (typeof exportClientsData === 'function') {
                                exportClientsData();
                            }
                            break;
                        default:
                            console.warn('Unknown action:', action);
                    }
                });
            });
            
            // Add event listeners for general action buttons
            document.querySelectorAll('.action-btn[data-action]').forEach(actionBtn => {
                actionBtn.addEventListener('click', function() {
                    const action = this.getAttribute('data-action');
                    console.log('General action clicked:', action);
                    
                    switch(action) {
                        case 'access-mela-webmail':
                            if (typeof window.accessMelaWebmail === 'function') {
                                window.accessMelaWebmail();
                            } else if (typeof accessMelaWebmail === 'function') {
                                accessMelaWebmail();
                            }
                            break;
                        case 'open-webmail':
                            if (typeof window.openWebmail === 'function') {
                                window.openWebmail();
                            } else if (typeof openWebmail === 'function') {
                                openWebmail();
                            }
                            break;
                        case 'refresh-email-list':
                            if (typeof window.refreshEmailList === 'function') {
                                window.refreshEmailList();
                            } else if (typeof refreshEmailList === 'function') {
                                refreshEmailList();
                            }
                            break;
                        case 'test-dns':
                            if (typeof window.testDNS === 'function') {
                                window.testDNS();
                            } else if (typeof testDNS === 'function') {
                                testDNS();
                            }
                            break;
                        case 'refresh-logs':
                            if (typeof window.refreshLogs === 'function') {
                                window.refreshLogs();
                            } else if (typeof refreshLogs === 'function') {
                                refreshLogs();
                            }
                            break;
                        default:
                            console.warn('Unknown action:', action);
                    }
                });
            });
            
            // Add event listener for add user form
            const addUserForm = document.getElementById('add-user-form');
            if (addUserForm) {
                addUserForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    console.log('Add user form submitted');
                    
                    if (typeof window.handleAddUser === 'function') {
                        window.handleAddUser(e);
                    } else if (typeof handleAddUser === 'function') {
                        handleAddUser(e);
                    } else {
                        console.error('handleAddUser function not found');
                    }
                });
            }
            
            // Add event listener for user type dropdown in add user form
            const userTypeSelect = document.getElementById('new-user-type');
            if (userTypeSelect) {
                userTypeSelect.addEventListener('change', function() {
                    const clientFields = document.getElementById('client-fields');
                    if (clientFields) {
                        if (this.value === 'client') {
                            clientFields.style.display = 'block';
                        } else {
                            clientFields.style.display = 'none';
                        }
                    }
                });
            }
            
            // Fallback manual navigation function
            window.manualShowSection = function(sectionId) {
                console.log('Using manual navigation for:', sectionId);
                
                // Hide all sections
                document.querySelectorAll('.section').forEach(section => {
                    section.classList.remove('active');
                });
                
                // Remove active class from nav items
                document.querySelectorAll('.nav-item').forEach(item => {
                    item.classList.remove('active');
                });
                
                // Show selected section
                const targetSection = document.getElementById(sectionId);
                if (targetSection) {
                    targetSection.classList.add('active');
                    console.log('‚úÖ Activated section:', sectionId);
                } else {
                    console.error('‚ùå Section not found:', sectionId);
                }
                
                // Add active class to clicked nav item
                const navItem = document.querySelector(`[data-section="${sectionId}"]`);
                if (navItem) {
                    navItem.classList.add('active');
                    console.log('‚úÖ Activated nav item for:', sectionId);
                } else {
                    console.error('‚ùå Nav item not found for:', sectionId);
                }
            };
            
            console.log('‚úÖ Navigation event listeners set up complete - first section');
        } // End of setupNavigation function
    });
                actionBtn.addEventListener('click', function() {
                    const action = this.getAttribute('data-action');
                    console.log('User action clicked:', action);
                    
                    switch(action) {
                        case 'refresh-clients':
                            if (typeof window.loadClientsList === 'function') {
                                window.loadClientsList();
                            } else if (typeof loadClientsList === 'function') {
                                loadClientsList();
                            }
                            break;
                        case 'export-clients':
                            if (typeof window.exportClientsData === 'function') {
                                window.exportClientsData();
                            } else if (typeof exportClientsData === 'function') {
                                exportClientsData();
                            }
                            break;
                        default:
                            console.warn('Unknown action:', action);
                    }
                });
            });
            
            // Add event listeners for general action buttons
            document.querySelectorAll('.action-btn[data-action]').forEach(actionBtn => {
                actionBtn.addEventListener('click', function() {
                    const action = this.getAttribute('data-action');
                    console.log('General action clicked:', action);
                    
                    switch(action) {
                        case 'access-mela-webmail':
                            if (typeof window.accessMelaWebmail === 'function') {
                                window.accessMelaWebmail();
                            } else if (typeof accessMelaWebmail === 'function') {
                                accessMelaWebmail();
                            }
                            break;
                        case 'open-webmail':
                            if (typeof window.openWebmail === 'function') {
                                window.openWebmail();
                            } else if (typeof openWebmail === 'function') {
                                openWebmail();
                            }
                            break;
                        case 'refresh-email-list':
                            if (typeof window.refreshEmailList === 'function') {
                                window.refreshEmailList();
                            } else if (typeof refreshEmailList === 'function') {
                                refreshEmailList();
                            }
                            break;
                        case 'test-dns':
                            if (typeof window.testDNS === 'function') {
                                window.testDNS();
                            } else if (typeof testDNS === 'function') {
                                testDNS();
                            }
                            break;
                        case 'refresh-logs':
                            if (typeof window.refreshLogs === 'function') {
                                window.refreshLogs();
                            } else if (typeof refreshLogs === 'function') {
                                refreshLogs();
                            }
                            break;
                        default:
                            console.warn('Unknown action:', action);
                    }
                });
            });
            
            // Add event listener for add user form
            const addUserForm = document.getElementById('add-user-form');
            if (addUserForm) {
                addUserForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    console.log('Add user form submitted');
                    
                    if (typeof window.handleAddUser === 'function') {
                        window.handleAddUser(e);
                    } else if (typeof handleAddUser === 'function') {
                        handleAddUser(e);
                    } else {
                        console.error('handleAddUser function not found');
                    }
                });
            }
            
            // Add event listener for create domain form (backup)
            const createDomainForm = document.getElementById('create-domain-form');
            if (createDomainForm) {
                // Remove any existing listeners first to avoid duplicates
                createDomainForm.removeEventListener('submit', handleDomainCreation);
                
                createDomainForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    console.log('Create domain form submitted');
                    
                    if (typeof window.handleDomainCreation === 'function') {
                        window.handleDomainCreation(e);
                    } else if (typeof handleDomainCreation === 'function') {
                        handleDomainCreation(e);
                    } else {
                        console.error('handleDomainCreation function not found');
                    }
                });
            }
            
            // Add event listener for user type dropdown in add user form
            const userTypeSelect = document.getElementById('new-user-type');
            if (userTypeSelect) {
                userTypeSelect.addEventListener('change', function() {
                    const clientFields = document.getElementById('client-fields');
                    if (clientFields) {
                        if (this.value === 'client') {
                            clientFields.style.display = 'block';
                        } else {
                            clientFields.style.display = 'none';
                        }
                    }
                });
            }
            
            // Fallback manual navigation function
            window.manualShowSection = function(sectionId) {
                console.log('Using manual navigation for:', sectionId);
                
                // Hide all sections
                document.querySelectorAll('.section').forEach(section => {
                    section.classList.remove('active');
                });
                
                // Remove active class from nav items
                document.querySelectorAll('.nav-item').forEach(item => {
                    item.classList.remove('active');
                });
                
                // Show selected section
                const targetSection = document.getElementById(sectionId);
                if (targetSection) {
                    targetSection.classList.add('active');
                    console.log('‚úÖ Activated section:', sectionId);
                } else {
                    console.error('‚ùå Section not found:', sectionId);
                }
                
                // Add active class to clicked nav item
                const navItem = document.querySelector(`[data-section="${sectionId}"]`);
                if (navItem) {
                    navItem.classList.add('active');
                    console.log('‚úÖ Activated nav item for:', sectionId);
                } else {
                    console.error('‚ùå Nav item not found for:', sectionId);
                }
            };
            
            console.log('‚úÖ Navigation event listeners set up complete');
        } // End of setupNavigation function
    });
    </script>
    <!-- SparQ Plug launcher (always-available) -->
    <div id="sparq-plug-launcher" style="position: fixed; right: 20px; bottom: 20px; z-index: 9999;">
        <button id="open-sparq-plug" style="background: #1a7ad9; color: white; border: none; padding: 12px 16px; border-radius: 999px; box-shadow: 0 8px 20px rgba(0,0,0,.15); font-weight: 700; cursor: pointer;">
            ‚ö° Open SparQ Plug
        </button>
    <a href="https://getsparqd.com/app/" target="_blank" style="display:block; text-align:center; margin-top:8px; color:#1a7ad9; font-weight:600; text-decoration:none;">Open Full App</a>
    </div>
    <div id="sparq-plug-panel" style="position: fixed; right: 20px; bottom: 80px; width: 420px; height: 70vh; background: #fff; border-radius: 14px; box-shadow: 0 20px 40px rgba(0,0,0,.2); overflow: hidden; display: none; z-index: 9999;">
        <div style="display:flex; align-items:center; justify-content:space-between; padding:10px 12px; background:linear-gradient(135deg,#1a7ad9,#da0c43); color:#fff;">
            <strong>SparQ Plug</strong>
            <button id="close-sparq-plug" style="background:transparent; border:none; color:#fff; font-size:20px; line-height:20px; cursor:pointer;">√ó</button>
        </div>
    <iframe src="https://getsparqd.com/app/" style="border:0; width:100%; height:calc(100% - 42px);"></iframe>
    </div>
    <script>
        (function(){
            const openBtn = document.getElementById('open-sparq-plug');
            const closeBtn = document.getElementById('close-sparq-plug');
            const panel = document.getElementById('sparq-plug-panel');
            openBtn?.addEventListener('click', ()=> panel.style.display = 'block');
            closeBtn?.addEventListener('click', ()=> panel.style.display = 'none');
        })();
    </script>
</body>
</html>
